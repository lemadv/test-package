version: 2.1

executors:
  node-executor:
    docker:
      - image: cimg/node:18.17

jobs:
  pre-release:
    executor: node-executor
    steps:
      - checkout
      
      - run:
          name: Set Up npm Cache
          command: |
            mkdir -p ~/.npm && echo "Setting up npm cache"
      - restore_cache:
          keys:
            - npm-cache-{{ checksum "package-lock.json" }}
      
      - run:
          name: Install Dependencies
          command: npm ci
      
      - save_cache:
          paths:
            - ~/.npm
          key: npm-cache-{{ checksum "package-lock.json" }}

      - run:
          name: Configure Git
          command: |
            git config --global user.name "$CIRCLE_USERNAME"
            git config --global user.email "$CIRCLE_USERNAME@users.noreply.github.com"

      - run:
          name: Get Next RC Version
          command: |
            set -e
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            ALL_VERSIONS=$(npm view test-package-lema2 versions --json)
            CURRENT_RC=$(echo $ALL_VERSIONS | jq -r '.[]' | grep "^${CURRENT_VERSION}-rc\." || true)
            if [ -z "$CURRENT_RC" ]; then
              NEXT_VERSION="${CURRENT_VERSION}-rc.1"
            else
              HIGHEST_RC=$(echo "$CURRENT_RC" | sort -V | tail -1)
              NEXT_VERSION=$(npx semver "$HIGHEST_RC" --increment prerelease --preid rc)
            fi
            echo "export NEXT_VERSION=$NEXT_VERSION" >> $BASH_ENV
            echo "Next RC version: $NEXT_VERSION"

      - run:
          name: Update Version in package.json
          command: npm version $NEXT_VERSION --no-git-tag-version

      - run:
          name: Debug Environment Variable
          command: |
             echo "Variable is available: $NPM_TOKEN"

      - run:
          name: Set Up npm Authentication
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc

      - run:
          name: Publish Pre-release to npm
          command: npm publish --tag rc
          environment:
            NODE_AUTH_TOKEN: $NPM_TOKEN

      - run:
          name: Create and Push Git Tag
          command: |
            git tag v$NEXT_VERSION
            git push origin v$NEXT_VERSION

      - run:
          name: Debug Environment Variable
          command: |
             echo "Variable is available: $GITHUB_TOKEN"

      - run:
          name: Print All Environment Variables
          command: printenv


      - run:
          name: Generate Release Notes
          shell: /bin/bash
          command: |
            # Debug token substitution
            if [ -z "$GITHUB_TOKEN" ]; then
              echo "❌ GITHUB_TOKEN is not set"
              exit 1
            else
              echo "✅ GITHUB_TOKEN is set: ${GITHUB_TOKEN:0:4}***"
            fi

            # Fetch the latest two tags
            TAGS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
              "https://api.github.com/repos/lemadv/test-package/tags?per_page=2")

            TAG_COUNT=$(echo "$TAGS" | jq 'length')
            if [ "$TAG_COUNT" -lt 2 ]; then
              echo "This is the first release. No previous commits to compare."
              NOTES="This is the first release. No previous commits to compare."
            else
              CURRENT_TAG=$(echo "$TAGS" | jq -r '.[0].name')
              PREVIOUS_TAG=$(echo "$TAGS" | jq -r '.[1].name')

              echo "Current tag: $CURRENT_TAG"
              echo "Previous tag: $PREVIOUS_TAG"

              # Fetch commits between tags
              COMMITS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                "https://api.github.com/repos/lemadv/test-package/compare/$PREVIOUS_TAG...$CURRENT_TAG")

              # Group commits by component
              GROUPED_COMMITS=$(echo "$COMMITS" | jq -r '
                .commits | group_by(.commit.message | capture("^\\w+\\(([^)]+)\\):").component) | 
                map({
                  component: .[0].commit.message | capture("^\\w+\\(([^)]+)\\):").component,
                  commits: map({
                    type: .commit.message | capture("^\\w+").type,
                    description: .commit.message | capture("^\\w+\\([^)]*\\):\\s*(?<desc>.+)").desc,
                    hash: .sha[0:7],
                    url: .html_url
                  })
                })
              ')

              # Generate Markdown Notes
              NOTES=""
              echo "$GROUPED_COMMITS" | jq -c '.[]' | while read -r group; do
                COMPONENT=$(echo "$group" | jq -r '.component')
                COMMITS=$(echo "$group" | jq -c '.commits[]')

                NOTES+="### $COMPONENT\n\n"
                NOTES+="| Type | Commit | Description |\n"
                NOTES+="|------|--------|-------------|\n"

                echo "$COMMITS" | jq -c '.' | while read -r commit; do
                  TYPE=$(echo "$commit" | jq -r '.type')
                  HASH=$(echo "$commit" | jq -r '.hash')
                  URL=$(echo "$commit" | jq -r '.url')
                  DESCRIPTION=$(echo "$commit" | jq -r '.description')

                  NOTES+="| $TYPE | [$HASH]($URL) | $DESCRIPTION |\n"
                done

                NOTES+="\n"
              done
            fi

            echo "Generated Release Notes:"
            echo "$NOTES"

            # Save to environment and file
            echo "export RELEASE_NOTES=\"$NOTES\"" >> $BASH_ENV
            echo "$NOTES" > release_notes.md

      - run:
          name: Create GitHub Release
          shell: /bin/bash
          command: |
            # Debug token substitution
            if [ -z "$GITHUB_TOKEN" ]; then
              echo "❌ GITHUB_TOKEN is not set"
              exit 1
            else
              echo "✅ GITHUB_TOKEN is set: ${GITHUB_TOKEN:0:4}***"
            fi

            # Debug other variables
            echo "NEXT_VERSION: $NEXT_VERSION"
            echo "RELEASE_BODY: $NOTES"

            # Generate payload
            PAYLOAD=$(jq -n --arg tag_name "v$NEXT_VERSION" \
                            --arg name "Release v$NEXT_VERSION" \
                            --arg body "$NOTES" \
                            '{tag_name: $tag_name, name: $name, body: $body, draft: false, prerelease: true}')
            echo "Generated payload: $PAYLOAD"

            # Create release
            curl -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              https://api.github.com/repos/lemadv/test-package/releases

workflows:
  version: 2
  pre-release-workflow:
    jobs:
      - pre-release
