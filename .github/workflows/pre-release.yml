name: Pre-release Workflow

on:
  push:
    branches:
      - staging

jobs:
  pre-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org/'

      - name: Cache npm tarballs
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-

      - name: Configure Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Install dependencies
        run: npm ci

      - name: Get Next RC Version
        id: get-next-rc-version
        run: |
          set -e  # Exit on errors
      
          # Get the current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Base version from package.json: $CURRENT_VERSION"
      
          # Get all versions from npm
          ALL_VERSIONS=$(npm view test-package-lema2 versions --json)
          echo "All versions from npm: $ALL_VERSIONS"
      
          # Filter RC versions for the current version
          CURRENT_RC=$(echo $ALL_VERSIONS | jq -r '.[]' | grep "^${CURRENT_VERSION}-rc\." || true)
          echo "Matching RC versions: $CURRENT_RC"
      
          if [ -z "$CURRENT_RC" ]; then
            # If no RC versions are found, start with rc.1
            NEXT_VERSION="${CURRENT_VERSION}-rc.1"
          else
            # Use semver to find the highest RC and increment it
            HIGHEST_RC=$(echo "$CURRENT_RC" | sort -V | tail -1)
            echo "Highest RC version found: $HIGHEST_RC"

            # Increment the RC version using semver
            NEXT_VERSION=$(npx semver "$HIGHEST_RC" --increment prerelease --preid rc)
          fi
      
          echo "Next RC version: $NEXT_VERSION"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Update version in package.json
        run: npm version ${{ env.next_version }} --no-git-tag-version

      - name: Publish pre-release to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --tag rc
  
      - name: Create and push Git tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag v${{ env.next_version }}
          git push origin v${{ env.next_version }}

      - name: Generate Release Notes
        id: generate-notes
        uses: actions/github-script@v6
        with:
          script: |
            const { data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });
      
            if (tags.length < 2) {
              console.log("This is the first release. No previous tags found.");
              core.setOutput("notes", "This is the first release. No previous commits to compare.");
              return;
            }
      
            const currentTag = tags[0].name;
            const previousTag = tags[1].name;
      
            const { data: commits } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: previousTag,
              head: currentTag
            });
      
            // Group commits by `component`
            const groupedCommits = commits.commits.reduce((groups, commit) => {
              const message = commit.commit.message;
      
              // Match the format [type](component): description
              const match = message.match(/^(\w+)\(([\w-]+)\): (.+)$/);
              const type = match ? match[1] : "-";
              const component = match ? match[2] : "-";
              const description = match ? match[3] : message;
      
              if (!groups[component]) {
                groups[component] = [];
              }
              groups[component].push({
                type,
                hash: commit.sha.slice(0, 7),
                url: `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${commit.sha}`,
                description,
              });
      
              return groups;
            }, {});
      
            // Generate Markdown Table for Each Component
            let notes = '';
            for (const [component, commits] of Object.entries(groupedCommits)) {
              notes += `### ${component}\n\n`;
              notes += '| Type | Commit | Description |\n';
              notes += '|------|--------|-------------|\n';
              commits.forEach(({ type, hash, url, description }) => {
                notes += `| ${type} | [${hash}](${url}) | ${description} |\n`;
              });
              notes += '\n';
            }
      
            console.log("Generated Release Notes:");
            console.log(notes);
      
            core.setOutput("notes", notes.trim());
        


      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.next_version }}
          release_name: Release v${{ env.next_version }}
          body: ${{ steps.generate-notes.outputs.notes }}
          draft: false
          prerelease: true
